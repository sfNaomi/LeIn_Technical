name: Deploy Deltas to Sandbox

# Definition when the workflow should run
on:
    workflow_dispatch:
    push:
        branches:
            - develop
            - interfaces
            - staging

# Jobs to be executed.
jobs:
    getLastSuccessCommit:
        runs-on: ubuntu-latest
        name: Obtaining Last Successful Commit SHA
        outputs:
            last_commit: ${{ steps.export_value.outputs.commit }}
        steps:
            -   uses: actions/setup-node@v3
                with:
                    node-version: 16
            -   uses: nrwl/last-successful-commit-action@v1
                id: last_commit
                with:
                    branch: ${{ github.ref_name }}
                    workflow_id: 'deltaDeploy.yml'
                    github_token: ${{ secrets.GITHUB_TOKEN }}

            -   name: Export value
                id: export_value
                run: |
                    echo "::set-output name=commit::${{ steps.last_commit.outputs.commit_hash }}"

    Deployment:
        runs-on: ubuntu-latest
        name: Deployment
        needs: getLastSuccessCommit
        steps:
            -   uses: actions/setup-node@v3
                with:
                    node-version: 16
            # Install Salesforce CLI.
            -   name: 'Install Salesforce CLI'
                run: npm install sfdx-cli --global

            # Install sfdx plugin
            -   name: 'Install plugin'
                shell: bash
                run: |
                    printf 'y\n' | sfdx plugins:install sfdx-git-delta@latest

            # Checkout the source code
            -   name: Checkout source code
                uses: actions/checkout@v3
                with:
                    fetch-depth: 0

            # check if there was successful commit
            -   name: Check if Last Successful Commit is present
                id: check-success-commit
                shell: bash
                run: |
                    if [ "${{ needs.getLastSuccessCommit.outputs.last_commit }}" == "" ]; then
                        firstCommitFull=$(git log ${{ github.ref_name }} --oneline | tail -1)
                        firstCommit="${firstCommitFull:0:7}"
                        echo "::set-output name=fromCommit::${firstCommit}"
                    else
                        echo ::set-output name=fromCommit::${{needs.getLastSuccessCommit.outputs.last_commit}}
                    fi

            # remove unneeded items from PS
            -   name: remove unneeded items from PS
                id: modify-xml
                uses: ./.github/actions/modifyXML
                with:
                    nodeToDelete: '["ManageCssUsers"]'

            # prepare delta
            -   name: Prepare Delta
                run: |
                    echo Last successful commit used: ${{ steps.check-success-commit.outputs.fromCommit }}                   
                    echo Last Commit to which the delta is prepared: ${{ github.sha }}

                    sfdx sgd:source:delta --to "HEAD" --from ${{ steps.check-success-commit.outputs.fromCommit }}  --output . -i .sgdignore
                    echo "LINES=$(wc -l < package/package.xml)" >> $GITHUB_ENV
                    echo "LINES_DESTRUCTIVE=$(wc -l < destructiveChanges/destructiveChanges.xml)" >> $GITHUB_ENV
                    cat package/package.xml

            # Run JavaScript Action to parse JSON and do other decisions
            -   name: Prepare Credentials and Certificates
                id: credentials-preparation
                uses: ./.github/actions/parseJSON
                with:
                    branch: ${{ github.ref_name }}

            # Deploy
            -   name: Deploy to ${{ github.ref_name }}
                env:
                    JWT_QA: ${{ secrets.QA_CERTIFICATE }}
                    JWT_STAGING: ${{ secrets.STAGING_CERTIFICATE }}
                    JWT_PROD: ${{ secrets.DEV_HUB_CERTIFICATE }}
                    JWT_INTERFACES: ${{ secrets.INTERFACES_CERTIFICATE }}
                shell: bash
                if: env.LINES != 3
                run: |
                    echo "$JWT_QA" | base64 --decode > ${HOME}/qa.key
                    echo "$JWT_STAGING" | base64 --decode > ${HOME}/staging.key
                    echo "$JWT_PROD" | base64 --decode > ${HOME}/prod.key
                    echo "$JWT_INTERFACES" | base64 --decode > ${HOME}/interfaces.key
                    echo "running on branch ${GITHUB_REF_NAME}"
                    
                    echo "${{ steps.credentials-preparation.outputs.userName }}"
                    echo "${{ steps.credentials-preparation.outputs.clientId }}"
                    echo "${{ steps.credentials-preparation.outputs.instanceUrl }}"
                    echo "${{ steps.credentials-preparation.outputs.certificatePath }}"
                    
                    sfdx force:auth:jwt:grant --clientid ${{ steps.credentials-preparation.outputs.clientId  }} -u ${{ steps.credentials-preparation.outputs.userName }} --jwtkeyfile ${{ steps.credentials-preparation.outputs.certificatePath }} --instanceurl ${{ steps.credentials-preparation.outputs.instanceUrl }}
                    sfdx force:source:deploy -x package/package.xml -l RunLocalTests -u ${{ steps.credentials-preparation.outputs.userName }}
                                  
            # check destructive changes
            -   name: Check Destructive Changes
                shell: bash
                if: env.LINES_DESTRUCTIVE == 3
                run: |
                    cat destructiveChanges/destructiveChanges.xml
                    echo "There are no destructive changes to deploy"

            # deploy destructive changes
            -   name: Deploy Destructive Changes
                shell: bash
                if: steps.credentials-preparation.outputs.runDestructive && env.LINES_DESTRUCTIVE != 3
                run: |
                    echo "Deploying destructive changes:"
                    cat destructiveChanges/destructiveChanges.xml
                    sfdx force:auth:jwt:grant --clientid ${{ steps.credentials-preparation.outputs.clientId  }} -u ${{ steps.credentials-preparation.outputs.userName }} --jwtkeyfile ${{ steps.credentials-preparation.outputs.certificatePath }} --instanceurl ${{ steps.credentials-preparation.outputs.instanceUrl }}
                    sfdx force:mdapi:deploy -d destructiveChanges --ignorewarnings -u ${{ steps.credentials-preparation.outputs.userName }}

            # Nothing to Deploy
            - name: Nothing to Deploy
              if: env.LINES == 3
              run: echo "There is nothing to deploy as the package.xml is empty"

            # Destructive changes not allowed
            -   name: Not Allowed to Deploy Destructive Changes
                if: env.LINES_DESTRUCTIVE != 3 && steps.credentials-preparation.outputs.runDestructive == false
                run: |
                    echo "There are Destructive changes to deploy but it is not allowed for this environment"
                    cat destructiveChanges/destructiveChanges.xml
