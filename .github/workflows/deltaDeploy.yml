name: Deploy Deltas to Sandbox

# Definition when the workflow should run
on:
    workflow_dispatch:
        inputs:
            last-successful-commit-id:
                type: string
                required: true
                description: Id of Last Successfully Deployed Commit
    push:
        branches:
            - develop
            - work_on_deploy_script

# Jobs to be executed.
jobs:
    getLastSuccessCommit:
        runs-on: ubuntu-latest
        name: Obtaining Last Successful Commit SHA
        outputs:
            output1: ${{ steps.step2.outputs.commit }}
            userName: ${{ steps.step3.outputs.userName}}
            clientId: ${{ steps.step3.outputs.clientId}}
            instanceUrl: ${{ steps.step3.outputs.instanceUrl}}
        steps:
            -   uses: actions/setup-node@v3
                with:
                    node-version: 16
            -   uses: nrwl/last-successful-commit-action@v1
                id: step1
                with:
                    branch: ${{ github.ref_name }}
                    workflow_id: 'deltaDeploy.yml'
                    github_token: ${{ secrets.GITHUB_TOKEN }}

            -   name: install dependencies
                run: npm install @actions/core

            -   name: Export value
                id: step2
                run: |
                    echo "::set-output name=commit::${{ steps.step1.outputs.commit_hash }}"

    Deployment:
        runs-on: ubuntu-latest
        name: Deployment
        needs: getLastSuccessCommit
        steps:
            -   uses: actions/setup-node@v3
                with:
                    node-version: 16
            # Install Salesforce CLI.
            -   name: 'Install Salesforce CLI'
                run: |
                    wget https://developer.salesforce.com/media/salesforce-cli/sfdx/channels/stable/sfdx-linux-x64.tar.xz
                    mkdir ~/sfdx
                    tar xJf sfdx-linux-x64.tar.xz -C ~/sfdx --strip-components 1
                    echo "$HOME/sfdx/bin" >> $GITHUB_PATH
                    ~/sfdx/bin/sfdx version

            # Install sfdx plugin
            -   name: 'Install plugin'
                shell: bash
                run: |
                    printf 'y\n' | sfdx plugins:install sfdx-git-delta@latest

            # Checkout the source code
            -   name: Checkout source code
                uses: actions/checkout@v3
                with:
                    fetch-depth: 0

            # prepare delta
            -   name: Prepare Delta
                run: |
                    echo Last successful commit used: ${{needs.getLastSuccessCommit.outputs.output1}}                    
                    echo Last Commit to which the delta is prepared: ${{ github.sha }}

                    sfdx sgd:source:delta --to "HEAD" --from ${{ needs.getLastSuccessCommit.outputs.output1 }} --output . -i .sgdignore
                    echo "LINES=$(wc -l < package/package.xml)" >> $GITHUB_ENV
                    cat package/package.xml

            -   name: Load App
                id: step3
            -   uses: actions/setup-node@v3
                with:
                    node-version: 16
            -   uses: ./.github/actions/parseJSON
                with:
                    branch: ${{ github.ref_name }}

            - name: testic2
              run: |
                  echo "${{ steps.step3.outputs.userName }}"
                  echo "${{ steps.step3.outputs.clientId }}"
                  echo "${{ steps.step3.outputs.instanceUrl }}"
              

            # Deploy to QA
            -   name: Deploy to QA
                env:
                    JWT: ${{ secrets.QA_CERTIFICATE }}
                shell: bash
                if: env.LINES != 3 && github.ref_name == 'qa'
                run: |
                    echo "$JWT" | base64 --decode > ${HOME}/server.key
                    echo "running on branch ${GITHUB_REF_NAME}"
                    
                    sfdx force:auth:jwt:grant --clientid ${{ needs.getLastSuccessCommit.outputs.clientId }} -u ${{ needs.getLastSuccessCommit.outputs.userName }} --jwtkeyfile ${HOME}/server.key --instanceurl ${{ needs.getLastSuccessCommit.outputs.instanceUrl }}
                    sfdx force:source:deploy -x package/package.xml -l RunLocalTests -u ${{ env.settings_develop_username }}
                                  
            
