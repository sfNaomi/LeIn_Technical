"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const fs_extra_1 = tslib_1.__importDefault(require("fs-extra"));
const path_1 = require("path");
function loadProject(projectDir = ".") {
    return new Project(projectDir);
}
exports.loadProject = loadProject;
class Project {
    constructor(path) {
        this.path = path;
    }
    get exists() {
        return exists(this.path);
    }
    get isDx() {
        return exists(this.sfdxProjectConfigPath);
    }
    join(...args) {
        return path_1.join(this.path, ...args);
    }
    get sfdxProjectConfigPath() {
        return path_1.join(this.path, "sfdx-project.json");
    }
    get packageJsonPath() {
        return path_1.join(this.path, "package.json");
    }
    get sfdxProjectConfig() {
        if (!this.isDx) {
            throw Error(`Not a DX project: ${this.path}`);
        }
        const projectConfig = fs_extra_1.default.readFileSync(this.sfdxProjectConfigPath);
        try {
            return JSON.parse(projectConfig.toString());
        }
        catch (e) {
            console.error(e);
            throw Error(`Failed to parse project config: ${this.sfdxProjectConfigPath}`);
        }
    }
    get packageJson() {
        const projectConfig = fs_extra_1.default.readFileSync(this.packageJsonPath);
        try {
            return JSON.parse(projectConfig.toString());
        }
        catch (e) {
            console.error(e);
            throw Error(`Failed to parse package.json: ${this.packageJsonPath}`);
        }
    }
    get sourceApiVersion() {
        const projectConfig = this.sfdxProjectConfig;
        try {
            return projectConfig.sourceApiVersion;
        }
        catch (e) {
            console.error(e);
            throw Error(`Source API version not found: ${this.sfdxProjectConfigPath}`);
        }
    }
    get sfdxDefaultProjectDirectory() {
        const projectConfig = this.sfdxProjectConfig;
        try {
            if (projectConfig.packageDirectories.length === 1) {
                return projectConfig.packageDirectories[0].path;
            }
            return projectConfig.packageDirectories.filter((it) => it.default)[0];
        }
        catch (e) {
            console.error(e);
            throw Error(`No default package directory found: ${this.sfdxProjectConfigPath}`);
        }
    }
}
exports.Project = Project;
function exists(file) {
    try {
        fs_extra_1.default.statSync(file);
    }
    catch (e) {
        return false;
    }
    return true;
}
//# sourceMappingURL=project.js.map