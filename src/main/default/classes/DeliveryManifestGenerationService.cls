/**
 * Created by magdalena.stanciu on 16.10.2022.
 */

public with sharing class DeliveryManifestGenerationService {
    private static List<Order> orders {get; set;}
    private static Map<Id, String> orderNotes {get; set;}

    private List<Load> loads {get; set;}

    public DeliveryManifestGenerationService(List<String> orderIds) {
        init(orderIds);
    }

    /**
     * @description initializes the services
     *
     * @param orderIds list of order ids
     *
     * @return N/A
     *
     * @author Magdalena Stanciu
     * @date 2022-10-18
     */
    @TestVisible
    private void init(List<String> orderIds) {
        getOrders(orderIds);
        getNotesForOrders(orderIds);
    }

    /**
     * @description retrieves the loads generated by service
     *
     * @param N/A
     *
     * @return List<Load> list of generated loads
     *
     * @author Magdalena Stanciu
     * @date 2022-10-18
     */
    @TestVisible
    public List<Load> getLoads() {
        generateLoads();
        sortLoads();
        return this.loads;
    }


    /**
     * @description generates the loads for the orders passed as input in the initialization of the service and returns them
     *
     * @param N/A
     *
     * @return N/A
     *
     * @author Magdalena Stanciu
     * @date 2022-10-18
     */
    @TestVisible
    private void generateLoads() {
        Map<Id, Load> loadsByLoadId = new Map<Id, Load>();

        for (Order newOrder : orders) {
            Id loadId = newOrder.Load__c;
            Load newLoad = loadsByLoadId.get(loadId);
            if (newLoad == null) {
                newLoad = new Load(newOrder);
            }
            newLoad.distributeNewItem(newOrder);

            loadsByLoadId.put(loadId, newLoad);
        }

        this.loads = loadsByLoadId.values();
    }

    /**
    * @description sorts loads and load items generated by service
    *
    * @param N/A
    *
    * @return N/A
    *
    * @author Magdalena Stanciu
    * @date 2022-10-18
    */
    @TestVisible
    private void sortLoads() {
        this.loads.sort();
        for (Load newLoad: this.loads) {
            newLoad.loadItems.sort();
        }
    }

    /**
    * @description retrieves orders for the order ids passed as input parameter
    *
    * @param orderIds list of order ids
    *
    * @return N/A
    *
    * @author Magdalena Stanciu
    * @date 2022-10-18
    */
    @TestVisible
    private void getOrders(List<String> orderIds) {
        orders = [
            SELECT
                Id, AccountId, Account.Name, Account.Phone, Account.PrimaryPaymentMethod__c,
                ShippingStreet, ShippingCity,ShippingPostalCode, CreatedBy.Name,
                Account.OpeningTime__c, Account.FixedDeliveryInstructions__c, GridDelivery__c,
                ShortDescription__c, PalletSequence__c, TotalQuantity__c, TotalOrderWeight__c,
                Load__r.Name, Load__r.DeliveryDate__c, Load__r.Driver__r.Name, Load__r.Vehicle__r.VehicleRegistration__c,
                Load__r.Vehicle__r.LoadCapacityWeight__c, Load__r.Vehicle__r.LoadLimitCases__c
            FROM Order
            WHERE Id IN :orderIds AND Order.Load__c != NULL
        ];
    }

    /**
    * @description retrieves latest note for the order ids passed as input parameter
    *
    * @param orderIds list of order ids
    *
    * @return N/A
    *
    * @author Magdalena Stanciu
    * @date 2022-10-24
    */
    @TestVisible
    private void getNotesForOrders(List<String> orderIds) {
        List<ContentDocumentLink> fileLinks = [
                SELECT Id, LinkedEntityId, ContentDocument.LatestPublishedVersion.VersionData
                FROM ContentDocumentLink
                WHERE LinkedEntityId IN :orderIds AND ContentDocument.FileType = 'SNOTE'
                ORDER BY ContentDocument.CreatedDate ASC
        ];

        orderNotes = new Map<Id, String>();
        for (ContentDocumentLink link : fileLinks) {
            Blob fileContentAsBlob = link.ContentDocument?.LatestPublishedVersion?.VersionData;
            String fileContentAsString = EncodingUtil.base64Decode(EncodingUtil.base64Encode(fileContentAsBlob)).toString();
            orderNotes.put(link.LinkedEntityId, fileContentAsString);
        }
    }

    /**
    * @description defines a wrapper class used to expose data to VF page for pick sheet rendering
    *
    * @author Magdalena Stanciu
    * @date 2022-10-18
    */
    public class Load implements Comparable {
        public String loadID {get; set;}
        public String driver {get; set;}
        public String vehicle {get; set;}
        public Date deliveryDate {get; set;}
        public String vehicleCapacity {get; set;}

        public Decimal totalQuantity {get; set;}
        public Decimal totalWeight {get; set;}

        private Set<Id> dps {get; set;}
        private Set<String> grids {get; set;}
        private Set<Integer> pallets {get; set;}

        public List<LoadItem> loadItems {get; set;}

        public Integer numberOfDps {
            get {
                return dps.size();
            }
        }
        public Integer numberOfPallets {
            get {
                return pallets.size();
            }
        }
        public String grid {
            get {
                grids.remove(null);
                return grids.isEmpty() ? '' : String.join(new List<String>(grids), '+');
            }
        }

        public Load(Order newOrder) {
            this.loadID = newOrder.Load__r.Name;
            this.driver = newOrder.Load__r?.Driver__r?.Name;
            this.vehicle = newOrder.Load__r?.Vehicle__r?.VehicleRegistration__c;
            this.deliveryDate = newOrder.Load__r?.DeliveryDate__c;

            Decimal capacityWeight = newOrder.Load__r?.Vehicle__r?.LoadCapacityWeight__c;
            Decimal capacityCases = newOrder.Load__r?.Vehicle__r?.LoadLimitCases__c;
            this.vehicleCapacity = (capacityWeight == null ? '' : capacityWeight + ' ' + System.Label.DeliveryManifestKG) +
                    ', ' + (capacityCases == null ? '' : capacityCases + ' ' + System.Label.DeliveryManifestCS);

            this.totalQuantity = 0;
            this.totalWeight = 0;

            this.dps = new Set<Id>();
            this.grids = new Set<String>();
            this.pallets = new Set<Integer>();

            this.loadItems = new List<LoadItem>();
        }

        /**
        * @description distributes (summarize/roll-up info where relevant) a new order item to a load
        *
        * @param newOrder order to be distributed
        *
        * @return N/A
        *
        * @author Magdalena Stanciu
        * @date 2022-10-18
        */
        public void distributeNewItem(Order newOrder) {
            this.totalQuantity += newOrder.TotalQuantity__c;
            this.totalWeight += newOrder.TotalOrderWeight__c;

            this.dps.add(newOrder.AccountId);
            this.pallets.add((Integer) newOrder.PalletSequence__c);
            this.grids.add(newOrder.GridDelivery__c);

            this.addLoadItem(newOrder);
        }

        /**
        * @description add a new load item to a load
        *
        * @param newOrder order to create/update a load item for
        *
        * @return N/A
        *
        * @author Magdalena Stanciu
        * @date 2022-10-18
        */
        private void addLoadItem(order newOrder) {
            LoadItem newLoadItem = new LoadItem(newOrder);
            this.loadItems.add(newLoadItem);
        }

        /**
        * @description method used to compare two loads to ensure ascending sorting based on delivery date
        *
        * @param comparableObject object used to compare a load with
        *
        * @return Integer returns -1 if lower, 1 if higher, 0 if equal
        *
        * @author Magdalena Stanciu
        * @date 2022-10-18
        */
        public Integer compareTo(Object comparableObject) {
            Load comparableLoad = (Load) comparableObject;

            // L1 sorting - based on delivery date
            if (this.deliveryDate < comparableLoad.deliveryDate) {
                return -1;
            }
            if (this.deliveryDate > comparableLoad.deliveryDate) {
                return 1;
            }

            return 0;
        }
    }

    /**
    * @description defines a wrapper class used to expose data to VF page for pick sheet rendering
    *
    * @author Magdalena Stanciu
    * @date 2022-10-18
    */
    public class LoadItem implements Comparable {
        public Integer palletSequence {get; set;}
        public String palletDescription {get; set;}
        public String accountName {get; set;}
        public String shippingAddress {get; set;}
        public String shippingPostalCode {get; set;}
        public Decimal quantity {get; set;}
        public String deliveryInstructions {get; set;}
        public String notes {get; set;}
        public String phone {get; set;}
        public String openingTime {get; set;}
        public String tam {get; set;}
        public String paymentMethod {get; set;}
        public Decimal weight {get; set;}

        /**
        * @description method used to compare two load items to ensure ascending sorting based on pallet sequence
        *
        * @param comparableObject object used to compare a load item with
        *
        * @return Integer returns -1 if lower, 1 if higher, 0 if equal
        *
        * @author Magdalena Stanciu
        * @date 2022-10-18
        */
        public Integer compareTo(Object comparableObject) {
            LoadItem comparableLoadItem = (LoadItem) comparableObject;

            // L1 sorting - based on sequence
            if (this.palletSequence < comparableLoadItem.palletSequence) {
                return -1;
            }
            if (this.palletSequence > comparableLoadItem.palletSequence) {
                return 1;
            }

            return 0;
        }

        public LoadItem(Order newOrder) {
            this.palletSequence = (Integer) newOrder.PalletSequence__c;
            this.palletDescription = newOrder.ShortDescription__c;
            this.accountName = newOrder?.Account?.Name;
            this.shippingPostalCode = newOrder.ShippingPostalCode;
            this.quantity = newOrder?.TotalQuantity__c;
            this.deliveryInstructions = newOrder?.Account?.FixedDeliveryInstructions__c;
            this.phone = newOrder?.Account?.Phone;
            this.tam = newOrder?.CreatedBy?.Name;
            this.paymentMethod = newOrder?.Account?.PrimaryPaymentMethod__c;
            this.weight = newOrder?.TotalOrderWeight__c;
            this.notes = orderNotes.get(newOrder.Id);

            Time openingTime = newOrder?.Account?.OpeningTime__c;
            this.openingTime = openingTime != null ? openingTime.hour() + ':' + openingTime.minute() : '';

            String street = newOrder.ShippingStreet == null ? ' ' : newOrder.ShippingStreet;
            String city = newOrder.ShippingCity == null ? ' ' : newOrder.ShippingCity;
            this.shippingAddress = (street + ' ' + city).trim();
        }
    }
}