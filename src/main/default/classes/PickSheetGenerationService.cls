/**
 * Created by magdalena.stanciu on 16.10.2022.
 */

public with sharing class PickSheetGenerationService {
    private static List<OrderItem> orderItems { get; set; }
    private static Map<Id, Map<Id, String>> inventoryIdProductIdPickLocations { get; set; }

    private Map<Id, LoadPlan> loadIdLoadPlans { get; set; }

    public PickSheetGenerationService(List<String> orderIds) {
        init(orderIds);
        generateLoadPlans();
    }

    /**
	 * @description retrieves the load plans generated by the service
	 *
	 * @param N/A
	 *
	 * @return List<LoadPlan> list of load plans corresponding to the orders passed as input in the initialization of the service
	 *
	 * @author Magdalena Stanciu
	 * @date 2022-10-18
	 */
    public List<LoadPlan> getLoadPlans() {
        List<LoadPlan> results = this.loadIdLoadPlans.values();
        results.sort();
        return results;
    }

    /**
	 * @description initializes the services
	 *
	 * @param orderIds list of order ids
	 *
	 * @return N/A
	 *
	 * @author Magdalena Stanciu
	 * @date 2022-10-18
	 */
    @TestVisible
    private void init(List<String> orderIds) {
        getOrderItems(orderIds);
        initializePickLocations();
    }

    /**
	 * @description generates the load plans for the orders passed as input in the initialization of the service
	 *
	 * @param N/A
	 *
	 * @return N/A
	 *
	 * @author Magdalena Stanciu
	 * @date 2022-10-18
	 */
    @TestVisible
    private void generateLoadPlans() {
        this.loadIdLoadPlans = new Map<Id, LoadPlan>();
        for (OrderItem newOrderItem : orderItems) {
            Id loadId = newOrderItem.Order.Load__c;

            LoadPlan newLoadPlan = this.loadIdLoadPlans.get(loadId);
            if (newLoadPlan == null) {
                newLoadPlan = new LoadPlan(newOrderItem);
            }
            newLoadPlan.distributeNewItem(newOrderItem);

            this.loadIdLoadPlans.put(loadId, newLoadPlan);
        }
    }

    /**
    * @description retrieves orders for the order ids passed as input parameter
    *
    * @param orderIds list of order ids
    *
    * @return N/A
    *
    * @author Magdalena Stanciu
    * @date 2022-10-18
    */
    @TestVisible
    private void getOrderItems(List<String> orderIds) {
        orderItems = [
                SELECT
                        Id, Product2Id, Product2.Name, Product2.ProductCode, Quantity, OrderId, Order.AccountId,
                        Order.Load__r.Name, Order.Load__r.DeliveryDate__c, Order.PalletSequence__c,
                        Order.PalletDescription__c, Order.Grid__c, Order.Load__r.Driver__r.Name,
                        Order.Load__r.Vehicle__r.VehicleRegistration__c, Order.aforza__Inventory__c
                FROM OrderItem
                WHERE OrderId IN :orderIds AND Order.Load__c != NULL AND aforza__Type__c NOT IN ('Tax', 'Discount') AND IsDRSProduct__c = false
        ];
    }

    /**
    * @description retrieves the pick locations for the products and inventories corresponding to the orders passed as input to the service
    *
    * @param N/A
    *
    * @return N/A
    *
    * @author Magdalena Stanciu
    * @date 2022-10-18
    */
    @TestVisible
    private void initializePickLocations()  {
        // get ids of inventories and products to get pick locations for
        Set<Id> productIds = new Set<Id>();
        Set<Id> inventoryIds = new Set<Id>();
        for (OrderItem newOrderItem : orderItems) {
            inventoryIds.add(newOrderItem.Order?.aforza__Inventory__c);
            productIds.add(newOrderItem.Product2Id);
        }
        inventoryIds.remove(null);
        productIds.remove(null);

        // query inventories
        List<aforza__Inventory_Product__c> inventoryItems = [
                SELECT Id, aforza__Product__c, aforza__Inventory__c, PickingLocation__c
                FROM aforza__Inventory_Product__c
                WHERE aforza__Product__c IN :productIds AND aforza__Inventory__c IN :inventoryIds
        ];

        // construct map for pick locations
        inventoryIdProductIdPickLocations = new Map<Id, Map<Id, String>>();
        for (aforza__Inventory_Product__c inventoryItem : inventoryItems) {
            Map<Id, String> productIdPickLocations = inventoryIdProductIdPickLocations.get(inventoryItem.aforza__Inventory__c);
            if (productIdPickLocations == null) {
                productIdPickLocations = new Map<Id, String>();
            }
            productIdPickLocations.put(inventoryItem.aforza__Product__c, inventoryItem.PickingLocation__c);
            inventoryIdProductIdPickLocations.put(inventoryItem.aforza__Inventory__c, productIdPickLocations);
        }
    }

    /**
    * @description defines a wrapper class used to expose data to VF page for pick sheet rendering
    *
    * @author Magdalena Stanciu
    * @date 2022-10-18
    */
    public class LoadPlan implements Comparable {
        public String load { get; set; }
        public String driver { get; set; }
        public String vehicle { get; set; }
        public Date deliveryDate { get; set; }

        public List<PalletSequence> palletSequences {
            get {
                List<PalletSequence> results = this.sequenceNumberPalletSequences.values();
                results.sort();

                return results;
            }
        }

        private Map<Integer, PalletSequence> sequenceNumberPalletSequences {
            get {
                if (sequenceNumberPalletSequences == null) {
                    sequenceNumberPalletSequences = new Map<Integer, PalletSequence>();
                }
                return sequenceNumberPalletSequences;
            }
            set;
        }

        public LoadPlan(OrderItem newOrderItem) {
            this.load = newOrderItem.Order?.Load__r.Name;
            this.driver = newOrderItem.Order?.Load__r?.Driver__r.Name;
            this.vehicle = newOrderItem.Order?.Load__r?.Vehicle__r.VehicleRegistration__c;
            this.deliveryDate = newOrderItem.Order?.Load__r?.DeliveryDate__c;
        }

        /**
        * @description distributes (summarize/roll-up info where relevant) a new order item to a load plan
        *
        * @param newOrderItem order item to be distributed
        *
        * @return N/A
        *
        * @author Magdalena Stanciu
        * @date 2022-10-18
        */
        public void distributeNewItem(OrderItem newOrderItem) {
            this.addPalletSequence(newOrderItem);
        }

        /**
        * @description add a new pallet sequence to a load plan
        *
        * @param newOrderItem order item to create/update a pallet sequence for
        *
        * @return N/A
        *
        * @author Magdalena Stanciu
        * @date 2022-10-18
        */
        private void addPalletSequence(orderItem newOrderItem) {
            Integer sequenceNumber = (Integer) newOrderItem.Order.PalletSequence__c;

            PalletSequence newPalletSequence = this.sequenceNumberPalletSequences.get(sequenceNumber);
            if (newPalletSequence == null) {
                newPalletSequence = new PalletSequence(newOrderItem);
            }
            newPalletSequence.distributeNewItem(newOrderItem);

            this.sequenceNumberPalletSequences.put(sequenceNumber, newPalletSequence);
        }

        /**
        * @description method used to compare two load plans to ensure ascending sorting based on delivery date
        *
        * @param comparableObject object used to compare a load plan with
        *
        * @return Integer returns -1 if lower, 1 if higher, 0 if equal
        *
        * @author Magdalena Stanciu
        * @date 2022-10-18
        */
        public Integer compareTo(Object comparableObject) {
            LoadPlan comparableLoadPlan = (LoadPlan) comparableObject;

            // L1 sorting - based on delivery date
            if (this.deliveryDate < comparableLoadPlan.deliveryDate) {
                return -1;
            }
            if (this.deliveryDate > comparableLoadPlan.deliveryDate) {
                return 1;
            }

            return 0;
        }
    }

    /**
    * @description defines a wrapper class used to expose data to VF page for pick sheet rendering
    *
    * @author Magdalena Stanciu
    * @date 2022-10-18
    */
    public class PalletSequence implements Comparable {
        private Set<Id> dps { get; set; }
        private Set<String> grids { get; set; }
        private Set<String> palletDescriptions { get; set; }

        public Integer sequenceNumber { get; set; }
        public Decimal totalCases { get; set; }

        public String grid {
            get {
                if (grids.size() > 1) {
                    return null;
                } else {
                    return (new List<String>(grids))[0];
                }
            }
        }
        public String palletDescription {
            get {
                if (palletDescriptions.size() > 1) {
                    return null;
                } else {
                    return (new List<String>(palletDescriptions))[0];
                }
            }
        }
        public Integer numberOfDps {
            get {
                return dps.size();
            }
        }

        public List<PalletSequenceItem> palletSequenceItems {
            get {
                List<PalletSequenceItem> results = this.productCodePalletSequenceItems.values();
                results.sort();

                return results;
            }
        }

        private Map<String, PalletSequenceItem> productCodePalletSequenceItems {
            get {
                if (productCodePalletSequenceItems == null) {
                    productCodePalletSequenceItems = new Map<String, PalletSequenceItem>();
                }
                return productCodePalletSequenceItems;
            }
            set;
        }

        /**
        * @description method used to compare two pallet sequences to ensure ascending sorting based on sequence number
        *
        * @param comparableObject object used to compare a pallet sequence with
        *
        * @return Integer returns -1 if lower, 1 if higher, 0 if equal
        *
        * @author Magdalena Stanciu
        * @date 2022-10-18
        */
        public Integer compareTo(Object comparableObject) {
            PalletSequence comparablePalletSequence = (PalletSequence) comparableObject;

            // L1 sorting - based on sequence Number
            if (this.sequenceNumber < comparablePalletSequence.sequenceNumber) {
                return -1;
            }
            if (this.sequenceNumber > comparablePalletSequence.sequenceNumber) {
                return 1;
            }

            return 0;
        }

        public PalletSequence(OrderItem newOrderItem) {
            this.sequenceNumber = (Integer) newOrderItem.Order.PalletSequence__c;
            this.totalCases = 0;

            this.dps = new Set<Id>();
            this.grids = new Set<String>();
            this.palletDescriptions = new Set<String>();
        }

        /**
        * @description distributes (summarize/roll-up info where relevant) a new order item to a pallet sequence
        *
        * @param newOrderItem order item to be distributed
        *
        * @return N/A
        *
        * @author Magdalena Stanciu
        * @date 2022-10-18
        */
        public void distributeNewItem(OrderItem newOrderItem) {
            this.dps.add(newOrderItem.Order.AccountId);
            this.grids.add(newOrderItem.Order.Grid__c);
            this.palletDescriptions.add(newOrderItem.Order.PalletDescription__c);
            this.totalCases += newOrderItem.Quantity == null ? 0 : newOrderItem.Quantity;

            this.addPalletSequenceItem(newOrderItem);
        }

        /**
        * @description add a new pallet sequence item to a pallet sequence
        *
        * @param newOrderItem order item to create/update a pallet sequence item for
        *
        * @return N/A
        *
        * @author Magdalena Stanciu
        * @date 2022-10-18
        */
        private void addPalletSequenceItem(orderItem newOrderItem) {
            String productCode = newOrderItem.Product2.ProductCode;

            // create new pallet sequence item / increase quantity on existing one
            PalletSequenceItem newPalletSequenceItem = this.productCodePalletSequenceItems.get(productCode);
            if (newPalletSequenceItem == null) {
                newPalletSequenceItem = new PalletSequenceItem(newOrderItem);
            }
            newPalletSequenceItem.distributeNewItem(newOrderItem);

            this.productCodePalletSequenceItems.put(productCode, newPalletSequenceItem);
        }
    }

    /**
    * @description defines a wrapper class used to expose data to VF page for pick sheet rendering
    *
    * @author Magdalena Stanciu
    * @date 2022-10-18
    */
    public class PalletSequenceItem implements Comparable{
        public String productCode { get; set; }
        public String productDescription { get; set; }
        public String pickLocation { get; set; }
        public Decimal quantity { get; set; }

        public PalletSequenceItem(OrderItem newOrderItem) {
            this.productCode = newOrderItem.Product2.ProductCode;
            this.productDescription = newOrderItem.Product2.Name;
            this.pickLocation = inventoryIdProductIdPickLocations.get(newOrderItem.Order.aforza__Inventory__c)?.get(newOrderItem.Product2Id);
            this.quantity = 0;
        }

        /**
        * @description distributes (summarize/roll-up info where relevant) a new order item to a pallet sequence item
        *
        * @param newOrderItem order item to be distributed
        *
        * @return N/A
        *
        * @author Magdalena Stanciu
        * @date 2022-10-18
        */
        public void distributeNewItem(OrderItem newOrderItem) {
            this.quantity += newOrderItem.Quantity == null ? 0 : newOrderItem.Quantity;
        }

        /**
        * @description method used to compare two pallet sequence items to ensure ascending sorting based on pick location (L1) and product code (L2)
        *
        * @param comparableObject object used to compare a pallet sequence item with
        *
        * @return Integer returns -1 if lower, 1 if higher, 0 if equal
        *
        * @author Magdalena Stanciu
        * @date 2022-10-18
        */
        public Integer compareTo(Object comparableObject) {
            PalletSequenceItem comparablePalletSequenceItem = (PalletSequenceItem) comparableObject;

            // L1 sorting - based on pick location
            if (this.pickLocation < comparablePalletSequenceItem.pickLocation) {
                return -1;
            }
            if (this.pickLocation > comparablePalletSequenceItem.pickLocation) {
                return 1;
            }

            // L2 sorting - based on SKU code
            if (this.productCode < comparablePalletSequenceItem.productCode) {
                return -1;
            }
            if (this.productCode > comparablePalletSequenceItem.productCode) {
                return 1;
            }

            return 0;
        }
    }
}